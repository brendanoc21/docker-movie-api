networks:
  api-redis-network:
  api-database-network:
  express-database-network:
  seeding-database-network:


volumes:
  moviedata:

services:

  api:
    image: doconnor/movies-api:1.0
    container_name: movies-api
    ports:
      - '9000:9000'
    environment:
      - MONGODB_URI=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@database:27017
      - REDIS_URI=redis://cache
      - ENABLE_WRITING_HANDLERS=false
    networks:
      - api-redis-network
      - api-database-network
    depends_on:
      - database
      - cache
  
  database:
    container_name: mongoDB
    image: mongo:8.0-rc
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
    networks:
      - api-database-network
      - express-database-network
      - seeding-database-network
    volumes:
      - moviedata:/data/db
    
  # https://stackoverflow.com/questions/30063907/docker-compose-how-to-execute-multiple-commands
  # https://www.mongodb.com/docs/database-tools/mongoimport/
  # https://docs.docker.com/get-started/docker-concepts/running-containers/sharing-local-files/#:~:text=If%20you%20have%20specific%20files,host%20and%20container%20for%20sharing.
  # https://docs.docker.com/engine/storage/bind-mounts/#use-a-bind-mount-with-compose
  # https://stackoverflow.com/questions/68927857/mongoexport-auth-error-using-mechanism-scram-sha-1
  # https://stackoverflow.com/questions/46796544/mongoimport-results-in-no-collection-specified-despite-having-collection-defin

  seeding:
    container_name: seed
    image: mongo:8.0-rc
    networks:
      - seeding-database-network
    command: mongoimport --authenticationDatabase=admin --db tmdb_movies --collection movies --jsonArray --drop --username ${MONGODB_USERNAME} --password ${MONGODB_PASSWORD} mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@database:27017 seeding.json
    depends_on:
      - database
    volumes:
      - type: bind
        source: ./seeding.json
        target: /seeding.json
    profiles: [seeding]

  cache:
    container_name: redis
    image: redis:alpine
    networks:
      - api-redis-network

  mongo-express:
    container_name: express
    image: mongo-express:1.0-20-alpine3.19
    restart: always 
    ports:
      - 8080:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGODB_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGODB_PASSWORD}
      - ME_CONFIG_MONGODB_URL=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@database:27017/
    networks:
      - express-database-network
    depends_on:
      - database